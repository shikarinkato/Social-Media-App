import React, { useContext, useEffect, useState } from "react";
import * as Icon from "react-feather";
import { useNavigate } from "react-router-dom";
import UserIcon from "../assests/img/userIcon.png";
import { Context } from "../context/StateProvider";
import { motion, useAnimation } from "framer-motion";

function Posts({ data }) {
  const [comment, setComment] = useState("");
  const [showCommentBox, setShowCommentBox] = useState(false);
  const { user, isAuthenticated, ChangeLikes, AddComment } =
    useContext(Context);

  const navigate = useNavigate();
  const commentBoxAnime = useAnimation();
  const commentBoxParentAnime = useAnimation();
  useEffect(() => {
    if (showCommentBox) {
      commentBoxAnime.start({ scale: 1, opacity: 1 });
      commentBoxParentAnime.start({
        display: "flex",
        background: "rgba(255,255,255,0.3)",
        zIndex: 50,
        backdropFilter: "blur(10px)",
      });
    } else if (!showCommentBox) {
      commentBoxAnime.start({ scale: 0, opacity: 0 });
      commentBoxParentAnime.start({
        display: "none",
        background: "transparent",
        zIndex: -20,
      });
    }
  }, [commentBoxAnime, commentBoxParentAnime, showCommentBox]);

  return (
    <div className="flex justify-center items-center flex-col gap-y-8 relative">
      {data.map((item, index) => {
        return (
          <div
            key={index}
            className="flex justify-center items-center flex-col bg-teal-700 rounded-md text-white"
          >
            <motion.div
              initial={{
                background: "transparent",
                zIndex: -20,
                display: "none",
              }}
              animate={commentBoxParentAnime}
              transition={{ duration: 1.5, ease: "circInOut", delay: 0.2 }}
              className=" h-screen fixed top-0 left-0 z-[1999] w-full "
            >
              <motion.div
                initial={{ scale: 0.2, opacity: 0.1 }}
                animate={commentBoxAnime}
                transition={{ duration: 1.5, ease: "circInOut", delay: 0.2 }}
                className=" py-3 pt-8 px-5 w-1/5 fixed top-1/2 left-1/3 -translate-x-[-50%] -translate-y-[-85%] bg-teal-700  rounded-md"
              >
                <textarea
                  name="commentBox"
                  id="commentBox"
                  cols="10"
                  rows="3"
                  className="rounded-md w-full outline-none border-none p-1 text-gray-900"
                  onChange={(e) => {
                    setComment(e.target.value);
                  }}
                ></textarea>
                <div className=" w-full flex justify-between items-center py-3 text-white font-semibold ">
                  <button
                    onClick={() => {
                      setShowCommentBox(true);
                    }}
                    className=" bg-red-600 py-1 px-3 rounded-md"
                  >
                    Discard
                  </button>
                  <button
                    onClick={() => {
                      AddComment(comment, item._id, item.user.userId, user._id);
                      setShowCommentBox(false);
                    }}
                    className=" bg-teal-600 py-1 px-3 rounded-md"
                  >
                    Comment
                  </button>
                </div>
              </motion.div>
            </motion.div>
            <div className="w-full py-3 px-4 flex items-center gap-x-2 relative">
              <img
                src={
                  item.user && item.user.pic !== "null"
                    ? item.user.pic
                    : UserIcon
                }
                alt="userimg"
                className="h-[50px] w-[50px] rounded-full object-cover"
              />
              <span>{item.user && item.user.userName}</span>
              {isAuthenticated && (
                <span className=" absolute right-2 top-3">
                  <Icon.MoreVertical size={25} stroke="white" />
                </span>
              )}
            </div>

            <div className="flex justify-center items-start  flex-col">
              <span className="py-2 px-4">{item.postCaption}</span>
              <img
                src={item.img}
                alt="postImg"
                className="h-auto w-[300px] object-contain"
              />
            </div>
            <div className="flex justify-start items-start gap-x-4 w-full px-4 py-2">
              <div className="flex justify-center items-center flex-col">
                <Icon.Heart
                  size={25}
                  stroke="white"
                  fill={
                    item.interactions.likes.length > 0 && user
                      ? item.interactions.likes.some(
                          (i) =>
                            i.byUser.toString() === user._id.toString(0) &&
                            "white"
                        ) && "white"
                      : "transparent"
                  }
                  className=" cursor-pointer"
                  onClick={() => {
                    if (isAuthenticated) {
                      if (item.interactions.likes.length > 0) {
                        if (
                          !item.interactions.likes.some(
                            (item) =>
                              item.byUser.toString() === user._id.toString()
                          )
                        ) {
                          ChangeLikes(
                            "add",
                            item._id,
                            item.user.userId,
                            user._id
                          );
                        } else {
                          ChangeLikes(
                            "remove",
                            item._id,
                            item.user.userId,
                            user._id
                          );
                        }
                      } else {
                        ChangeLikes(
                          "add",
                          item._id,
                          item.user.userId,
                          user._id
                        );
                      }
                    } else if (!isAuthenticated) {
                      navigate("/login");
                    } else {
                      return null;
                    }
                  }}
                />
                <span>{item.interactions.likes.length + " "} likes</span>
              </div>
              <div className="flex justify-center items-center flex-col">
                <Icon.MessageCircle
                  size={25}
                  stroke="white"
                  className=" cursor-pointer"
                  onClick={() => {
                    if (isAuthenticated) {
                      commentBoxParentAnime.start({
                        background: "rgba(255,255,255,0.4)",
                        backdropFilter: "blur(10px)",
                        display: "flex",
                        zIndex: 10,
                      });
                      commentBoxAnime.start({ opacity: 1, scale: 1 });
                    } else if (!isAuthenticated) {
                      navigate("/login");
                    } else {
                      return null;
                    }
                  }}
                />
                <span>{item.interactions.comments.length + " "} comments</span>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
}

export default Posts;
